import { BasicOptions, BasicTool } from "../basic";
import { ManagerTool } from "../basic";
/**
 * Register new \<tabpanel\> in reader right-side bar.
 */
export declare class ReaderTabPanelManager extends ManagerTool {
    private ui;
    private readerTool;
    private readerTabCache;
    constructor(base?: BasicTool | BasicOptions);
    /**
     * Register a tabpanel for every reader.
     * @remarks
     * Don't forget to call `unregisterReaderTabPanel` on exit.
     * @remarks
     * Every time a tab reader is selected/opened, the hook will be called.
     * @param tabLabel Label of panel tab.
     * @param renderPanelHook Called when panel is ready. Add elements to the panel.
     *
     * The panel might be `undefined` when opening a PDF without parent item.
     *
     * The owner deck is the top container of right-side bar.
     *
     * The readerInstance is the reader of current tabpanel.
     * @param options Other optional parameters.
     * @param options.tabId ID of panel tab. Also used as unregister query. If not set, generate a random one.
     * @param options.panelId ID of panel container (XUL.TabPanel). If not set, generate a random one.
     * @param options.targetIndex Index of the inserted tab. Default the end of tabs.
     * @param options.selectPanel If the panel should be selected immediately.
     * @returns tabId. Use it for unregister.
     * @example
     * Register an extra reader tabpanel into index 1.
     * ```ts
     * const readerTabId = `${config.addonRef}-extra-reader-tab`;
     * this._Addon.toolkit.UI.registerReaderTabPanel(
     *   "test",
     *   (
     *     panel: XUL.Element,
     *     deck: XUL.Deck,
     *     win: Window,
     *     reader: _ZoteroReaderInstance
     *   ) => {
     *     if (!panel) {
     *       this._Addon.toolkit.Tool.log(
     *         "This reader do not have right-side bar. Adding reader tab skipped."
     *       );
     *       return;
     *     }
     *     this._Addon.toolkit.Tool.log(reader);
     *     const elem = this._Addon.toolkit.UI.creatElementsFromJSON(
     *       win.document,
     *       {
     *         tag: "vbox",
     *         id: `${config.addonRef}-${reader._instanceID}-extra-reader-tab-div`,
     *         namespace: "xul",
     *         // This is important! Don't create content for multiple times
     *         ignoreIfExists: true,
     *         subElementOptions: [
     *           {
     *             tag: "h2",
     *             directAttributes: {
     *               innerText: "Hello World!",
     *             },
     *           },
     *           {
     *             tag: "label",
     *             namespace: "xul",
     *             directAttributes: {
     *               value: "This is a reader tab.",
     *             },
     *           },
     *           {
     *             tag: "label",
     *             namespace: "xul",
     *             directAttributes: {
     *               value: `Reader: ${reader._title.slice(0, 20)}`,
     *             },
     *           },
     *           {
     *             tag: "label",
     *             namespace: "xul",
     *             directAttributes: {
     *               value: `itemID: ${reader.itemID}.`,
     *             },
     *           },
     *           {
     *             tag: "button",
     *             directAttributes: {
     *               innerText: "Unregister",
     *             },
     *             listeners: [
     *               {
     *                 type: "click",
     *                 listener: () => {
     *                   this._Addon.toolkit.UI.unregisterReaderTabPanel(
     *                     readerTabId
     *                   );
     *                 },
     *               },
     *             ],
     *           },
     *         ],
     *       }
     *     );
     *     panel.append(elem);
     *   },
     *   {
     *     tabId: readerTabId,
     *   }
     * );
     * ```
     */
    register(tabLabel: string, renderPanelHook: (panel: XUL.TabPanel, ownerDeck: XUL.Deck, ownerWindow: Window, readerInstance: _ZoteroTypes.ReaderInstance) => void, options?: {
        tabId?: string;
        panelId?: string;
        targetIndex?: number;
        selectPanel?: boolean;
    }): Promise<string>;
    /**
     * Unregister the reader tabpanel.
     * @param tabId tab id
     */
    unregister(tabId: string): void;
    /**
     * Unregister all library tabpanel.
     */
    unregisterAll(): void;
    changeTabPanel(tabId: string, options: {
        [key: string]: unknown;
    }): void;
    private removeTabPanel;
    private initializeReaderTabObserver;
    private addReaderTabPanel;
}
//# sourceMappingURL=readerTabPanel.d.ts.map