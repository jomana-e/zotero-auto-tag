import { BasicOptions, BasicTool, ManagerTool } from "../basic";
import { getFieldHookFunc, setFieldHookFunc } from "./fieldHook";
/**
 * Register customized new row to the library itemBox (right-side info tab).
 */
export declare class ItemBoxManager extends ManagerTool {
    private globalCache;
    private localCache;
    private fieldHooks;
    private patcherManager;
    private initializationLock;
    constructor(base?: BasicTool | BasicOptions);
    /**
     * Register a custom row
     * @param field Field name. Used in `getField` and `setField`.
     * @param displayName The row header display text.
     * @param getFieldHook Called when loading row content.
     * If you registered the getField hook somewhere else (in ItemBox or FieldHooks), leave it undefined.
     * @param options
     * @param options.editable If the row is editable.
     * To edit a row, either the `options.setFieldHook` or a custom hook for `setField` created by FieldHookManager is required.
     * @param options.setFieldHook The `setField` hook.
     * @param options.index Target index. By default it's placed at the end of rows.
     * @param options.multiline If the row content is multiline.
     * @param options.collapsible If the row content is collapsible (like abstract field).
     */
    register(field: string, displayName: string, getFieldHook: typeof getFieldHookFunc | undefined, options?: {
        editable?: boolean;
        setFieldHook?: typeof setFieldHookFunc;
        index?: number;
        multiline?: boolean;
        collapsible?: boolean;
    }): Promise<void>;
    /**
     * Unregister a row of specific field.
     * @param field
     * @param options Skip unregister of certain hooks.
     * This is useful when the hook is not initialized by this instance
     * @param options.skipRefresh Skip refresh after unregister.
     */
    unregister(field: string, options?: {
        skipIsFieldOfBase?: boolean;
        skipGetField?: boolean;
        skipSetField?: boolean;
        skipRefresh?: boolean;
    }): void;
    unregisterAll(): void;
    /**
     * Refresh all item boxes.
     */
    refresh(): void;
    private initializeGlobal;
}
export interface ItemBoxGlobal {
    _ready: boolean;
    fieldOptions: {
        [key: string]: {
            field: string;
            displayName: string;
            index: number | undefined;
            editable: boolean;
            multiline: boolean;
            collapsible: boolean;
        };
    };
}
//# sourceMappingURL=itemBox.d.ts.map