import React = require("react");
import { BasicOptions, BasicTool } from "../basic";
import { ManagerTool } from "../basic";
import { getFieldHookFunc } from "./fieldHook";
import { GlobalInstance } from "./toolkitGlobal";
/**
 * Register customized new columns to the library itemTree.
 * @deprecated Use `Zotero.ItemTreeManager.registerColumns` instead.
 */
export declare class ItemTreeManager extends ManagerTool {
    /**
     * Signature to avoid patching more than once.
     */
    private globalCache;
    private localColumnCache;
    private localRenderCellCache;
    private initializationLock;
    private fieldHooks;
    private patcherManager;
    private defaultPersist;
    private backend;
    /**
     * Initialize Zotero._ItemTreeExtraColumnsGlobal if it doesn't exist.
     *
     * New columns and hooks are stored there.
     *
     * Then patch `require("zotero/itemTree").getColumns` and `Zotero.Item.getField`
     */
    constructor(base?: BasicTool | BasicOptions);
    unregisterAll(): void;
    /**
     * Register a new column. Don't forget to call `unregister` on plugin exit.
     * @param key Column dataKey
     * @param label Column display label
     * @param getFieldHook Called when loading cell content.
     * If you registered the getField hook somewhere else (in ItemBox or FieldHooks), leave it undefined.
     * @param options See zotero source code:chrome/content/zotero/itemTreeColumns.jsx
     * @param options.renderCellHook Called when rendering cell. This will override
     *
     * @example
     * ```ts
     * const itemTree = new ItemTreeTool();
     * await itemTree.register(
     *   "test",
     *   "new column",
     *   (
     *     field: string,
     *     unformatted: boolean,
     *     includeBaseMapped: boolean,
     *     item: Zotero.Item
     *   ) => {
     *     return field + String(item.id);
     *   },
     *   {
     *     iconPath: "chrome://zotero/skin/cross.png",
     *   }
     * );
     * ```
     */
    register(key: string, label: string, getFieldHook: typeof getFieldHookFunc | undefined, options?: {
        /** @deprecated Use `enabledTreeIDs` */
        defaultIn?: Set<"default" | "feeds" | "feed" | string>;
        /** @deprecated Use `enabledTreeIDs` */
        disabledIn?: Set<"default" | "feeds" | "feed" | string>;
        enabledTreeIDs?: string[];
        /** @deprecated Use `sortReverse` */
        defaultSort?: 1 | -1;
        sortReverse?: boolean;
        flex?: number;
        width?: number;
        fixedWidth?: boolean;
        staticWidth?: boolean;
        minWidth?: number;
        iconPath?: string;
        htmlLabel?: string;
        /** @deprecated Use `showInColumnPicker` */
        ignoreInColumnPicker?: boolean;
        /** @default true */
        showInColumnPicker?: boolean;
        /** @deprecated Use `columnPickerSubMenu` */
        submenu?: boolean;
        columnPickerSubMenu?: boolean;
        zoteroPersist?: Set<string> | Array<string>;
        dataProvider?: (item: Zotero.Item, dataKey: string) => string;
        renderCell?: (index: number, data: string, column: ColumnOptions & {
            className: string;
        }) => HTMLSpanElement;
        /** @deprecated Use `renderCell` */
        renderCellHook?: (index: number, data: string, column: ColumnOptions & {
            className?: string;
        }, original: Function) => HTMLElement;
    }): Promise<any>;
    /**
     * Unregister an extra column. Call it on plugin exit.
     * @param key Column dataKey, should be same as the one used in `register`
     * @param options.skipGetField skip unregister of getField hook.
     * This is useful when the hook is not initialized by this instance
     */
    unregister(key: string, options?: {
        skipGetField?: boolean;
    }): Promise<void>;
    /**
     * Add a patch hook for `_renderCell`, which is called when cell is rendered.
     * @deprecated
     *
     * This also works for Zotero's built-in cells.
     * @remarks
     * Don't call it manually unless you understand what you are doing.
     * @param dataKey Cell `dataKey`, e.g. 'title'
     * @param renderCellHook patch hook
     */
    addRenderCellHook(dataKey: string, renderCellHook: (index: number, data: string, column: ColumnOptions & {
        className?: string;
    }, original: Function) => HTMLElement): Promise<void>;
    /**
     * Remove a patch hook by `dataKey`.
     * @deprecated
     */
    removeRenderCellHook(dataKey: string): Promise<void>;
    /**
     * Do initializations. Called in constructor to be async
     */
    private initializeGlobal;
    /**
     * Create a React Icon element
     * @param props
     */
    private createIconLabel;
    /**
     * Refresh itemView. You don't need to call it manually.
     */
    refresh(): Promise<void>;
}
/**
 * @deprecated
 */
export interface ItemTreeGlobal extends GlobalInstance {
    columns: ColumnOptions[];
    renderCellHooks: {
        [key: string]: (index: number, data: string, column: ColumnOptions, original: Function) => HTMLElement;
    };
    /**
     * @deprecated moved to fieldHooks
     */
    fieldHooks?: any;
}
export interface ColumnOptions {
    dataKey: string;
    label: string;
    pluginID?: string;
    enabledTreeIDs?: string[];
    /** @deprecated */
    defaultIn?: Set<"default" | "feeds" | "feed" | string> | string[];
    /** @deprecated */
    disabledIn?: Set<"default" | "feeds" | "feed" | string> | string[];
    /** @deprecated */
    defaultSort?: 1 | -1;
    sortReverse?: boolean;
    flex?: number;
    width?: number;
    fixedWidth?: boolean;
    staticWidth?: boolean;
    minWidth?: number;
    iconLabel?: React.ReactElement;
    iconPath?: string;
    htmlLabel?: string;
    /** @deprecated */
    ignoreInColumnPicker?: boolean;
    /** @default true */
    showInColumnPicker?: boolean;
    /** @deprecated */
    submenu?: boolean;
    columnPickerSubMenu?: boolean;
    dataProvider?: (item: Zotero.Item, dataKey: string) => string;
    renderCell?: (index: number, data: string, column: ColumnOptions & {
        className: string;
    }) => HTMLSpanElement;
    zoteroPersist?: Set<string> | string[];
}
//# sourceMappingURL=itemTree.d.ts.map