import { BasicOptions, BasicTool } from "../basic";
import { ManagerTool } from "../basic";
/**
 * Register a new \<tabpanel\> in library right-side bar.
 */
export declare class LibraryTabPanelManager extends ManagerTool {
    private ui;
    private libraryTabCache;
    constructor(base?: BasicTool | BasicOptions);
    /**
     * Register a tabpanel in library.
     * @remarks
     * If you don't want to remove the tab & panel in runtime, `unregisterLibraryTabPanel` is not a must.
     *
     * The elements wiil be removed by `removeAddonElements`.
     * @param tabLabel Label of panel tab.
     * @param renderPanelHook Called when panel is ready. Add elements to the panel.
     * @param options Other optional parameters.
     * @param options.tabId ID of panel tab. Also used as unregister query. If not set, generate a random one.
     * @param options.panelId ID of panel container (XUL.TabPanel). If not set, generate a random one.
     * @param options.targetIndex Index of the inserted tab. Default the end of tabs.
     * @param options.selectPanel If the panel should be selected immediately.
     * @returns tabId. Use it for unregister.
     * @example
     * Register an extra library tabpanel into index 1.
     * ```ts
     * const libPaneManager = new LibraryTabPanelManager();
     * const libTabId = libPaneManager.registerLibraryTabPanel(
     *   "test",
     *   (panel: XUL.Element, win: Window) => {
     *     const elem = ui.creatElementsFromJSON(
     *       win.document,
     *       {
     *         tag: "vbox",
     *         namespace: "xul",
     *         subElementOptions: [
     *           {
     *             tag: "h2",
     *             directAttributes: {
     *               innerText: "Hello World!",
     *             },
     *           },
     *           {
     *             tag: "label",
     *             namespace: "xul",
     *             directAttributes: {
     *               value: "This is a library tab.",
     *             },
     *           },
     *           {
     *             tag: "button",
     *             directAttributes: {
     *               innerText: "Unregister",
     *             },
     *             listeners: [
     *               {
     *                 type: "click",
     *                 listener: () => {
     *                   ui.unregisterLibraryTabPanel(
     *                     libTabId
     *                   );
     *                 },
     *               },
     *             ],
     *           },
     *         ],
     *       }
     *     );
     *     panel.append(elem);
     *   },
     *   {
     *     targetIndex: 1,
     *   }
     * );
     * ```
     */
    register(tabLabel: string, renderPanelHook: (panel: XUL.TabPanel, ownerWindow: Window) => void, options?: {
        tabId?: string;
        panelId?: string;
        targetIndex?: number;
        selectPanel?: boolean;
    }): string;
    /**
     * Unregister the library tabpanel.
     * @param tabId tab id
     */
    unregister(tabId: string): void;
    /**
     * Unregister all library tabpanel.
     */
    unregisterAll(): void;
    private removeTabPanel;
}
//# sourceMappingURL=libraryTabPanel.d.ts.map