"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReaderInstanceManager = void 0;
const basic_1 = require("../basic");
const toolkitGlobal_1 = __importDefault(require("./toolkitGlobal"));
/**
 * Reader instance hooks.
 * @deprecated
 */
class ReaderInstanceManager extends basic_1.ManagerTool {
    constructor(base) {
        super(base);
        this.cachedHookIds = [];
        this.initializeGlobal();
    }
    /**
     * Register a reader instance hook
     * @deprecated
     * @remarks
     * initialized: called when reader instance is ready
     * @param type hook type
     * @param id hook id
     * @param hook
     */
    register(type, id, hook) {
        const Zotero = this.getGlobal("Zotero");
        switch (type) {
            case "initialized":
                {
                    this.globalCache.initializedHooks[id] = hook;
                    Zotero.Reader._readers.forEach(hook);
                }
                break;
            default:
                break;
        }
        this.cachedHookIds.push(id);
    }
    /**
     * Unregister hook by id
     * @param id
     */
    unregister(id) {
        delete this.globalCache.initializedHooks[id];
    }
    /**
     * Unregister all hooks
     */
    unregisterAll() {
        this.cachedHookIds.forEach((id) => this.unregister(id));
    }
    initializeGlobal() {
        this.globalCache = toolkitGlobal_1.default.getInstance().readerInstance;
        if (!this.globalCache._ready) {
            this.globalCache._ready = true;
            const Zotero = this.getGlobal("Zotero");
            const _this = this;
            Zotero.Reader._readers = new (this.getGlobal("Proxy"))(Zotero.Reader._readers, {
                set(target, p, newValue, receiver) {
                    target[p] = newValue;
                    if (!isNaN(Number(p))) {
                        Object.values(_this.globalCache.initializedHooks).forEach((hook) => {
                            try {
                                hook(newValue);
                            }
                            catch (e) {
                                _this.log(e);
                            }
                        });
                    }
                    return true;
                },
            });
        }
    }
}
exports.ReaderInstanceManager = ReaderInstanceManager;
//# sourceMappingURL=readerInstance.js.map