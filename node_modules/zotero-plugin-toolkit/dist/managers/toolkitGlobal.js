"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolkitGlobal = void 0;
const basic_1 = require("../basic");
const debugBridge_1 = require("../utils/debugBridge");
const pluginBridge_1 = require("../utils/pluginBridge");
/**
 * The Singleton class of global parameters used by managers.
 * @example `ToolkitGlobal.getInstance().itemTree.state`
 */
class ToolkitGlobal {
    constructor() {
        initializeModules(this);
        this.currentWindow = basic_1.BasicTool.getZotero().getMainWindow();
    }
    /**
     * Get the global unique instance of `class ToolkitGlobal`.
     * @returns An instance of `ToolkitGlobal`.
     */
    static getInstance() {
        const Zotero = basic_1.BasicTool.getZotero();
        let requireInit = false;
        if (!("_toolkitGlobal" in Zotero)) {
            Zotero._toolkitGlobal = new ToolkitGlobal();
            requireInit = true;
        }
        const currentGlobal = Zotero._toolkitGlobal;
        if (currentGlobal.currentWindow !== Zotero.getMainWindow()) {
            checkWindowDependentModules(currentGlobal);
            requireInit = true;
        }
        if (requireInit) {
            initializeModules(currentGlobal);
        }
        return currentGlobal;
    }
}
exports.ToolkitGlobal = ToolkitGlobal;
/**
 * Initialize global modules using the data of this toolkit build.
 * Modules and their properties that do not exist will be updated.
 * @param instance ToolkitGlobal instance
 */
function initializeModules(instance) {
    setModule(instance, "fieldHooks", {
        _ready: false,
        getFieldHooks: {},
        setFieldHooks: {},
        isFieldOfBaseHooks: {},
    });
    setModule(instance, "itemTree", {
        _ready: false,
        columns: [],
        renderCellHooks: {},
    });
    setModule(instance, "itemBox", {
        _ready: false,
        fieldOptions: {},
    });
    setModule(instance, "shortcut", {
        _ready: false,
        eventKeys: [],
    });
    setModule(instance, "prompt", {
        _ready: false,
        instance: undefined,
    });
    setModule(instance, "readerInstance", {
        _ready: false,
        initializedHooks: {},
    });
    debugBridge_1.DebugBridge.setModule(instance);
    pluginBridge_1.PluginBridge.setModule(instance);
}
function setModule(instance, key, module) {
    var _a;
    var _b;
    if (!module) {
        return;
    }
    if (!instance[key]) {
        instance[key] = module;
    }
    for (const moduleKey in module) {
        (_a = (_b = instance[key])[moduleKey]) !== null && _a !== void 0 ? _a : (_b[moduleKey] = module[moduleKey]);
    }
}
function checkWindowDependentModules(instance) {
    instance.currentWindow = basic_1.BasicTool.getZotero().getMainWindow();
    instance.itemTree = undefined;
    instance.itemBox = undefined;
    instance.shortcut = undefined;
    instance.prompt = undefined;
    instance.readerInstance = undefined;
}
exports.default = ToolkitGlobal;
//# sourceMappingURL=toolkitGlobal.js.map