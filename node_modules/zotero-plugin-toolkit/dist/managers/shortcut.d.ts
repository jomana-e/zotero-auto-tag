import { BasicOptions, BasicTool } from "../basic";
import { ManagerTool } from "../basic";
import { GlobalInstance } from "./toolkitGlobal";
/**
 * Register shortcut keys.
 * @deprecated Use { @link KeyboardManager} instead.
 */
export declare class ShortcutManager extends ManagerTool {
    private ui;
    private globalCache;
    private creatorId;
    constructor(base?: BasicTool | BasicOptions);
    /**
     * Register a shortcut key with window.addEventListener("keypress").
     *
     * The callback will not be affected by conflicting.
     * @param type
     * @param keyOptions
     */
    register(type: "event", keyOptions: {
        id: string;
        key: string;
        callback: (keyOptions: EventKey) => any;
        modifiers?: string;
        disabled?: boolean;
    }): boolean;
    /**
     * Register a key using XUL element \<key\>.
     *
     * The command might not be triggered if there are conflicting.
     * @param keyOptions
     * @returns `true` for success and `false` for failure.
     */
    register(type: "element", keyOptions: {
        id: string;
        key: string;
        modifiers?: keyof KeyModifierStatus;
        disabled?: boolean;
        xulData: {
            document?: Document;
            command?: string;
            oncommand?: string;
            _commandOptions?: {
                id: string;
                document: Document;
                oncommand?: string;
                disabled?: boolean;
                label?: string;
                _parentId: string;
            };
            _parentId: string;
        };
    }): boolean;
    /**
     * Register a Zotero key in preferences.
     *
     * Requires restarting Zotero to take effects.
     * @param type
     * @param keyOptions
     */
    register(type: "prefs", keyOptions: {
        id: string;
        key: string;
    }): boolean;
    /**
     * Register a custom key.
     *
     * This is possibly not what you want to use. An API for future extensions.
     * @param type
     * @param keyOptions
     */
    register(type: "custom", keyOptions: {
        id: string;
        key: string;
        callback: (keyOptions: CustomKey) => any;
        modifiers?: string;
        register: (keyOptions: CustomKey) => boolean | Promise<boolean>;
        unregister: (keyOptions: CustomKey) => boolean | Promise<boolean>;
    }): Promise<boolean> | boolean;
    /**
     * Get all shortcuts(element, event, prefs, builtin)
     */
    getAll(): Key[];
    /**
     * Check key conflicting of `inputKeyOptions`.
     * @param inputKeyOptions
     * @param options
     * @returns conflicting keys array
     */
    checkKeyConflicting(inputKeyOptions: Key, options?: {
        customKeys?: CustomKey[];
        includeEmpty?: boolean;
    }): Key[];
    /**
     * Find all key conflicting.
     * @param options
     * @returns An array of conflicting keys arrays. Same conflicting keys are put together.
     */
    checkAllKeyConflicting(options?: {
        customKeys?: CustomKey[];
        includeEmpty: boolean;
    }): Key[][];
    /**
     * Unregister a key.
     * @remarks
     * `builtin` keys cannot be unregistered.
     * @param keyOptions
     * @returns `true` for success and `false` for failure.
     */
    unregister(keyOptions: Key): Promise<boolean>;
    /**
     * Unregister all keys created by this instance.
     */
    unregisterAll(): void;
    private initializeGlobal;
    private registerEventKey;
    /**
     * Register Element \<commandset\>. In general, use `registerElementKey` or `registerKey`.
     * @param commandSetOptions
     */
    private registerElementCommandset;
    /**
     * Register Element \<command\>. In general, use `registerElementKey` or `registerKey`.
     * @param commandOptions
     */
    private registerElementCommand;
    /**
     * Register Element \<keyset\>. In general, use `registerElementKey` or `registerKey`.
     * @param keySetOptions
     */
    private registerElementKeyset;
    /**
     * Register a shortcut key element \<key\>.
     * @remarks
     * Provide `_parentId` to register a \<keyset\>;
     *
     * Provide `_commandOptions` to register a \<command\>;
     *
     * Provide `_parentId` in `_commandOptions` to register a \<commandset\>.
     *
     * See examples for more details.
     * @param keyOptions
     * @example
     */
    private registerElementKey;
    private getXULKey;
    private getXULKeyCode;
    private getStandardKey;
    /**
     * Get all \<commandset\> details.
     * @param doc
     */
    private getElementCommandSets;
    /**
     * Get all \<command\> details.
     * @param doc
     */
    private getElementCommands;
    /**
     * Get all \<keyset\> details.
     * @param doc
     * @param options
     */
    private getElementKeySets;
    /**
     * Get all \<key\> details.
     * @param doc
     * @param options
     */
    private getElementKeys;
    /**
     * Get \<key\> details in main window.
     * @param options
     */
    private getMainWindowElementKeys;
    private getEventKeys;
    /**
     * Get Zotero builtin keys defined in preferences.
     */
    private getPrefsKeys;
    /**
     * Get Zotero builtin keys not defined in preferences.
     */
    private getBuiltinKeys;
}
interface KeyModifierStatus {
    accel: boolean;
    shift: boolean;
    control: boolean;
    meta: boolean;
    alt: boolean;
}
export interface ShortcutsGlobal extends GlobalInstance {
    eventKeys: EventKey[];
}
interface BaseKey {
    id: string;
    modifiers?: keyof KeyModifierStatus | string;
    key?: string;
    type: string;
    disabled?: boolean;
    callback: () => any;
}
interface EventKey extends BaseKey {
    type: "event";
    creatorId: string;
}
interface ElementKey extends BaseKey {
    type: "element";
    xulData: {
        document: Document;
        command?: string;
        oncommand?: string;
        _commandOptions?: ElementCommand;
        _parentId: string;
    };
}
interface PrefKey extends BaseKey {
    type: "prefs";
}
interface BuiltinKey extends BaseKey {
    type: "builtin";
    disabled?: false;
}
interface CustomKey extends BaseKey {
    register?: (keyOptions: CustomKey) => boolean | Promise<boolean>;
    unregister?: (keyOptions: CustomKey) => boolean | Promise<boolean>;
}
type Key = EventKey | ElementKey | PrefKey | BuiltinKey | CustomKey;
interface ElementCommand {
    id: string;
    document: Document;
    oncommand?: string;
    disabled?: boolean;
    label?: string;
    _parentId: string;
}
export {};
//# sourceMappingURL=shortcut.d.ts.map