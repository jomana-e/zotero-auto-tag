"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClipboardHelper = void 0;
const basic_1 = require("../basic");
/**
 * Copy helper for text/richtext/image.
 *
 * @example
 * Copy plain text
 * ```ts
 * new ClipboardHelper().addText("plain", "text/unicode").copy();
 * ```
 * @example
 * Copy plain text & rich text
 * ```ts
 * new ClipboardHelper().addText("plain", "text/unicode")
 *                     .addText("<h1>rich text</h1>", "text/html")
 *                     .copy();
 * ```
 * @example
 * Copy plain text, rich text & image
 * ```ts
 * new ClipboardHelper().addText("plain", "text/unicode")
 *                     .addText("<h1>rich text</h1>", "text/html")
 *                     .addImage("data:image/png;base64,...")
 *                     .copy();
 * ```
 */
class ClipboardHelper extends basic_1.BasicTool {
    constructor() {
        super();
        this.filePath = "";
        // @ts-ignore
        this.transferable = Components.classes["@mozilla.org/widget/transferable;1"].createInstance(Components.interfaces.nsITransferable);
        // @ts-ignore
        this.clipboardService = Components.classes["@mozilla.org/widget/clipboard;1"].getService(Components.interfaces.nsIClipboard);
        this.transferable.init(null);
    }
    addText(source, type = "text/plain") {
        // @ts-ignore
        const str = Components.classes["@mozilla.org/supports-string;1"].createInstance(Components.interfaces.nsISupportsString);
        str.data = source;
        // Compatible to text/unicode in fx115
        if (this.isFX115() && type === "text/unicode")
            type = "text/plain";
        this.transferable.addDataFlavor(type);
        this.transferable.setTransferData(type, str, source.length * 2);
        return this;
    }
    addImage(source) {
        let parts = source.split(",");
        if (!parts[0].includes("base64")) {
            return this;
        }
        let mime = parts[0].match(/:(.*?);/)[1];
        let bstr = this.getGlobal("window").atob(parts[1]);
        let n = bstr.length;
        let u8arr = new Uint8Array(n);
        while (n--) {
            u8arr[n] = bstr.charCodeAt(n);
        }
        // @ts-ignore
        let imgTools = Components.classes["@mozilla.org/image/tools;1"].getService(Components.interfaces.imgITools);
        let mimeType;
        let img;
        if (this.getGlobal("Zotero").platformMajorVersion >= 102) {
            img = imgTools.decodeImageFromArrayBuffer(u8arr.buffer, mime);
            mimeType = "application/x-moz-nativeimage";
        }
        else {
            mimeType = `image/png`;
            // @ts-ignore
            img = Components.classes["@mozilla.org/supports-interface-pointer;1"].createInstance(Components.interfaces.nsISupportsInterfacePointer);
            img.data = imgTools.decodeImageFromArrayBuffer(u8arr.buffer, mimeType);
        }
        this.transferable.addDataFlavor(mimeType);
        this.transferable.setTransferData(mimeType, img, 0);
        return this;
    }
    addFile(path) {
        // @ts-ignore
        const file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsIFile);
        file.initWithPath(path);
        this.transferable.addDataFlavor("application/x-moz-file");
        this.transferable.setTransferData("application/x-moz-file", file);
        this.filePath = path;
        return this;
    }
    copy() {
        try {
            this.clipboardService.setData(this.transferable, null, Components.interfaces.nsIClipboard.kGlobalClipboard);
        }
        catch (e) {
            // For unknown reasons, on MacOS the copy will throw 0x80004005 error.
            if (this.filePath && Zotero.isMac) {
                Zotero.Utilities.Internal.exec(`/usr/bin/osascript`, [
                    `-e`,
                    `set the clipboard to POSIX file "${this.filePath}"`,
                ]);
            }
            else {
                throw e;
            }
        }
        return this;
    }
}
exports.ClipboardHelper = ClipboardHelper;
//# sourceMappingURL=clipboard.js.map